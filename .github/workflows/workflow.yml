name: Bygg, publish og deploy
on: push
env:
  APP: syfoaltinn
jobs:
  build-and-publish:
    name: Bygg, test og push Docker image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Generer versjon og image navn
        run: |
          TIME=$(TZ="Europe/Oslo" date +%Y.%m.%d-%H.%M)
          COMMIT=$(git rev-parse --short=8 HEAD)
          VERSION=$TIME-$COMMIT
          echo "IMAGE=docker.pkg.github.com/${GITHUB_REPOSITORY}/$APP:$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - run: echo $VERSION > VERSION.txt
      - name: Last opp VERSION til neste job
        uses: actions/upload-artifact@v1
        with:
          name: VERSION.txt
          path: VERSION.txt
      - name: Restore .m2 cache
        uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Bygg og test
        run: |
          mvn --settings maven-settings.xml clean install
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and publish Docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker build -t ${IMAGE} .
          docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p ${GITHUB_TOKEN}
          docker push ${IMAGE}

  deploy-to-dev-fss:
    name: Deploy til dev-fss (Q1)
    runs-on: ubuntu-latest
    needs: build-and-publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Last ned versjon
        uses: actions/download-artifact@v1
        with:
          name: VERSION.txt
          path: .
      - run: echo "VERSION=`cat VERSION.txt`" >> $GITHUB_ENV
      - run: echo "IMAGE=docker.pkg.github.com/${GITHUB_REPOSITORY}/$APP:$VERSION" >> $GITHUB_ENV
      - uses: nais/deploy/actions/deploy@v1
        name: Deploy to dev-fss
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: dev-fss
          RESOURCE: nais-dev.yaml

  deploy-to-prod-fss:
    if: github.ref == 'refs/heads/master'
    name: Deploy til prod-fss (Produksjon)
    runs-on: ubuntu-latest
    needs: build-and-publish
    steps:
      - name: Checkout code
        uses: actions/checkout@v1
      - name: Last ned versjon
        uses: actions/download-artifact@v1
        with:
          name: VERSION.txt
          path: .
      - run: echo "VERSION=`cat VERSION.txt`" >> $GITHUB_ENV
      - run: echo "IMAGE=docker.pkg.github.com/${GITHUB_REPOSITORY}/$APP:$VERSION" >> $GITHUB_ENV
      - uses: nais/deploy/actions/deploy@v1
        name: Deploy to prod-fss
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: prod-fss
          RESOURCE: nais-prod.yaml
      - uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}

  tag-image-as-latest:
    if: github.ref == 'refs/heads/master'
    name: Tag dockerimage as latest
    runs-on: ubuntu-latest
    needs: build-and-publish
    steps:
      - name: Last ned versjon
        uses: actions/download-artifact@v1
        with:
          name: VERSION.txt
          path: .
      - run: echo "VERSION=`cat VERSION.txt`" >> $GITHUB_ENV
      - run: echo "IMAGE=docker.pkg.github.com/${GITHUB_REPOSITORY}/$APP:$VERSION" >> $GITHUB_ENV
      - run: echo "LATEST=docker.pkg.github.com/${GITHUB_REPOSITORY}/$APP:latest" >> $GITHUB_ENV
      - name: Tag and push docker image
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p ${GITHUB_TOKEN}
          docker pull ${IMAGE}
          docker tag ${IMAGE} ${LATEST}
          docker push ${LATEST}
